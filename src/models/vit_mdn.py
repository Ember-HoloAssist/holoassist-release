# modified from ..
# Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
# Copyright 2020 Ross Wightman
# Modified Model definition

import torch
import torch.nn as nn
from functools import partial
import math
import warnings
import torch.nn.functional as F
import numpy as np
import torch.utils.model_zoo as model_zoo

from .TimeSformer.timesformer.models.vit_utils import (
    IMAGENET_DEFAULT_MEAN,
    IMAGENET_DEFAULT_STD,
)
from .TimeSformer.timesformer.models.helpers import load_pretrained
from .TimeSformer.timesformer.models.vit_utils import (
    DropPath,
    to_2tuple,
)  # trunc_normal_

from .TimeSformer.timesformer.models.build import MODEL_REGISTRY
from torch import einsum
from einops import rearrange, reduce, repeat


def _cfg(url="", **kwargs):
    return {
        "url": url,
        "num_classes": 1000,
        "input_size": (3, 224, 224),
        "pool_size": None,
        "crop_pct": 0.9,
        "interpolation": "bicubic",
        "mean": IMAGENET_DEFAULT_MEAN,
        "std": IMAGENET_DEFAULT_STD,
        "first_conv": "patch_embed.proj",
        "classifier": "head",
        **kwargs,
    }


default_cfgs = {
    "vit_base_patch16_224": _cfg(
        url="https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-vitjx/jx_vit_base_p16_224-80ecf9dd.pth",
        mean=(0.5, 0.5, 0.5),
        std=(0.5, 0.5, 0.5),
    ),
}


def trunc_normal_(tensor, mean=0.0, std=1.0, a=-2.0, b=2.0):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1.0 + math.erf(x / math.sqrt(2.0))) / 2.0

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn(
            "mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
            "The distribution of values may be incorrect.",
            stacklevel=2,
        )

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.0))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def drop_path(x, drop_prob: float = 0.0, training: bool = False):
    """Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).
    This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,
    the original name is misleading as 'Drop Connect' is a different form of dropout in a separate paper...
    See discussion: https://github.com/tensorflow/tpu/issues/494#issuecomment-532968956 ... I've opted for
    changing the layer and argument names to 'drop path' rather than mix DropConnect as a layer name and use
    'survival rate' as the argument.
    """
    if drop_prob == 0.0 or not training:
        return x
    keep_prob = 1 - drop_prob
    shape = (x.shape[0],) + (1,) * (
        x.ndim - 1
    )  # work with diff dim tensors, not just 2D ConvNets
    random_tensor = keep_prob + torch.rand(shape, dtype=x.dtype, device=x.device)
    random_tensor.floor_()  # binarize
    output = x.div(keep_prob) * random_tensor
    return output

def _conv_filter(state_dict, patch_size=16):
    """convert patch embedding weight from manual patchify + linear proj to conv"""
    out_dict = {}
    for k, v in state_dict.items():
        if "patch_embed.proj.weight" in k:
            if v.shape[-1] != patch_size:
                patch_size = v.shape[-1]
            v = v.reshape((v.shape[0], 3, patch_size, patch_size))
        out_dict[k] = v
    return out_dict


class DropPath(nn.Module):
    """Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks)."""

    def __init__(self, drop_prob=None):
        super(DropPath, self).__init__()
        self.drop_prob = drop_prob

    def forward(self, x):
        return drop_path(x, self.drop_prob, self.training)


class Mlp(nn.Module):
    def __init__(
        self,
        in_features,
        hidden_features=None,
        out_features=None,
        act_layer=nn.GELU,
        drop=0.0,
    ):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = act_layer()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(drop)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x


class Attention(nn.Module):
    def __init__(
        self,
        dim,
        num_heads=8,
        qkv_bias=False,
        qk_scale=None,
        attn_drop=0.0,
        proj_drop=0.0,
        with_qkv=True,
    ):
        super().__init__()
        self.num_heads = num_heads
        head_dim = dim // num_heads
        self.scale = qk_scale or head_dim**-0.5
        self.with_qkv = with_qkv
        if self.with_qkv:
            self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)
            self.proj = nn.Linear(dim, dim)
            self.proj_drop = nn.Dropout(proj_drop)
        self.attn_drop = nn.Dropout(attn_drop)

    def forward(self, x, return_attn=False):
        B, N, C = x.shape
        if self.with_qkv:
            qkv = (
                self.qkv(x)
                .reshape(B, N, 3, self.num_heads, C // self.num_heads)
                .permute(2, 0, 3, 1, 4)
            )
            q, k, v = qkv[0], qkv[1], qkv[2]
        else:
            qkv = x.reshape(B, N, self.num_heads, C // self.num_heads).permute(
                0, 2, 1, 3
            )
            q, k, v = qkv, qkv, qkv

        attn = (q @ k.transpose(-2, -1)) * self.scale
        attn = attn.softmax(dim=-1)
        attn = self.attn_drop(attn)

        x = (attn @ v).transpose(1, 2).reshape(B, N, C)
        if self.with_qkv:
            x = self.proj(x)
            x = self.proj_drop(x)
        if return_attn:
            return x, attn
        return x


class Block(nn.Module):
    def __init__(
        self,
        dim,
        num_heads,
        mlp_ratio=4.0,
        qkv_bias=False,
        qk_scale=None,
        drop=0.0,
        attn_drop=0.0,
        drop_path=0.1,
        act_layer=nn.GELU,
        norm_layer=nn.LayerNorm,
        attention_type="divided_space_time",
        class_tokens=1,
    ):
        super().__init__()
        self.attention_type = attention_type
        self.class_tokens = class_tokens
        assert attention_type in [
            "divided_space_time",
            "space_only",
            "joint_space_time",
        ]

        self.norm1 = norm_layer(dim)
        self.attn = Attention(
            dim,
            num_heads=num_heads,
            qkv_bias=qkv_bias,
            qk_scale=qk_scale,
            attn_drop=attn_drop,
            proj_drop=drop,
        )

        # Temporal Attention Parameters
        if self.attention_type == "divided_space_time":
            self.temporal_norm1 = norm_layer(dim)
            self.temporal_attn = Attention(
                dim,
                num_heads=num_heads,
                qkv_bias=qkv_bias,
                qk_scale=qk_scale,
                attn_drop=attn_drop,
                proj_drop=drop,
            )
            self.temporal_fc = nn.Linear(dim, dim)

        # drop path
        self.drop_path = DropPath(drop_path) if drop_path > 0.0 else nn.Identity()
        self.norm2 = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = Mlp(
            in_features=dim,
            hidden_features=mlp_hidden_dim,
            act_layer=act_layer,
            drop=drop,
        )

    def forward(self, x, B, T, W, return_attn=False):
        num_spatial_tokens = (x.size(1) - self.class_tokens) // T
        H = num_spatial_tokens // W

        if self.attention_type in ["space_only", "joint_space_time"]:
            x = x + self.drop_path(self.attn(self.norm1(x)))
            x = x + self.drop_path(self.mlp(self.norm2(x)))
            return x
        elif self.attention_type == "divided_space_time":
            # Temporal
            if self.class_tokens == 1:
                xt = x[:, 1:, :]
            else:
                xt = x[:, self.class_tokens :, :]
            # xt = rearrange(
            #     xt, "b (h w t) m -> (b h w) t m", b=B, h=H, w=W, t=T
            # )
            xt = rearrange(xt, "b (n t) m -> (b n) t m", b=B, t=T)
            if return_attn:
                latent, attn_temporal = self.temporal_attn(
                    self.temporal_norm1(xt), return_attn=return_attn
                )
                res_temporal = self.drop_path(latent)
            res_temporal = self.drop_path(self.temporal_attn(self.temporal_norm1(xt)))
            res_temporal = rearrange(res_temporal, "(b n) t m -> b (n t) m", b=B, t=T)
            res_temporal = self.temporal_fc(res_temporal)
            if self.class_tokens == 1:
                xt = x[:, 1:, :] + res_temporal
            else:
                xt = x[:, self.class_tokens :, :] + res_temporal

            # Spatial
            init_cls_token = x[:, : self.class_tokens, :]
            ans = []
            for each in range(self.class_tokens):
                tmp_init_cls_token = x[:, each, :].unsqueeze(1)
                cls_token = tmp_init_cls_token.repeat(1, T, 1)
                cls_token = rearrange(
                    cls_token, "b t m -> (b t) m", b=B, t=T
                ).unsqueeze(1)
                ans.append(cls_token)
                aux_cls_token = None
            xs = xt
            xs = rearrange(xs, "b (n t) m -> (b t) n m", b=B, t=T)
            if self.class_tokens == 1:
                xs = torch.cat((cls_token, xs), 1)
            else:
                xs = torch.cat(ans + [xs], 1)
            if return_attn:
                _, attn = self.attn(self.norm1(xs), return_attn=return_attn)
                return attn, attn_temporal
            else:
                res_spatial = self.drop_path(self.attn(self.norm1(xs)))

            # Taking care of CLS token
            cls_token = res_spatial[:, : self.class_tokens, :]
            cls_token = rearrange(cls_token, "(b t) j m -> b t j m", b=B, t=T)
            cls_token = torch.mean(cls_token, 1, False)  # averaging for every frame

            # if aux_cls_token is not None:
            #     aux_cls_token = res_spatial[:, -1, :]
            #     aux_cls_token = rearrange(aux_cls_token, '(b t) m -> b t m', b=B, t=T)
            #     aux_cls_token = torch.mean(aux_cls_token, 1, True)  # averaging for every frame

            # if aux_cls_token is None:
            res_spatial = res_spatial[:, self.class_tokens :, :]
            # else:
            #     res_spatial = res_spatial[:, 1:-1, :]
            res_spatial = rearrange(res_spatial, "(b t) n m -> b (n t) m", b=B, t=T)
            res = res_spatial
            x = xt

            # Mlp
            # if aux_cls_token is None:
            # import pdb; pdb.set_trace()
            x = torch.cat((init_cls_token, x), 1) + torch.cat((cls_token, res), 1)
            # else:
            #     x = torch.cat((init_cls_token, x, init_aux_cls_token), 1) + torch.cat((cls_token, res, aux_cls_token), 1)
            x = x + self.drop_path(self.mlp(self.norm2(x)))
            return x


class PatchEmbed(nn.Module):
    """Image to Patch Embedding"""

    def __init__(self, img_size=224, patch_size=16, in_chans=3, embed_dim=768):
        super().__init__()
        img_size = to_2tuple(img_size)
        patch_size = to_2tuple(patch_size)
        num_patches = (img_size[1] // patch_size[1]) * (img_size[0] // patch_size[0])
        self.img_size = img_size
        self.patch_size = patch_size
        self.num_patches = num_patches

        self.proj = nn.Conv2d(
            in_chans, embed_dim, kernel_size=patch_size, stride=patch_size
        )

    def forward(self, x):
        B, C, T, H, W = x.shape
        x = rearrange(x, "b c t h w -> (b t) c h w")
        x = self.proj(x)
        W = x.size(-1)
        x = x.flatten(2).transpose(1, 2)
        # import pdb; pdb.set_trace()
        return x, T, W


class JointEmbed(nn.Module):
    """Joints to Patch Embedding"""

    def __init__(self, in_dim=16, embed_dim=768):
        super().__init__()

        # self.proj = nn.Linear(in_dim, embed_dim)

        self.proj = nn.Sequential(
            nn.Linear(in_dim, embed_dim),
        )

    def forward(self, x):
        B, T, J, C = x.shape
        # print('hands mean', x.mean())
        # print('hands std', x.std())
        x = rearrange(x, "b t j c -> (b t j) c")
        x = self.proj(x)
        # print('hands mean after', x.mean())
        # print('hands std after', x.std())
        x = rearrange(x, "(b t j) c -> (b t) j c", b=B, t=T, j=J)
        return x, T, J


class EyeEmbed(nn.Module):
    """Joints to Patch Embedding"""

    def __init__(self, in_dim=7, embed_dim=768):
        super().__init__()
        self.proj = nn.Sequential(
            nn.Linear(in_dim, embed_dim),
        )

    def forward(self, x):
        B, T, C = x.shape
        x = rearrange(x, "b t c -> (b t) c")
        x = self.proj(x)
        x = x.unsqueeze(1)
        return x, T


class HeadEmbed(nn.Module):
    """Joints to Patch Embedding"""

    def __init__(self, in_dim=16, embed_dim=768):
        super().__init__()
        self.proj = nn.Sequential(
            nn.Linear(in_dim, embed_dim),
        )

    def forward(self, x):
        B, T, C = x.shape
        x = rearrange(x, "b t c -> (b t) c")
        x = self.proj(x)
        x = x.unsqueeze(1)
        return x, T


class TrackedEmbed(nn.Module):
    """Tracked information to Patch Embedding"""

    def __init__(self, in_dim=53, embed_dim=768):
        super().__init__()

        # self.proj = nn.Linear(in_dim, embed_dim)

        self.proj = nn.Sequential(
            nn.Linear(in_dim, embed_dim),
        )

    def forward(self, x):
        B, T, C = x.shape
        x = rearrange(x, "b t c -> (b t) c")
        x = self.proj(x)
        # print('hands mean after', x.mean())
        # print('hands std after', x.std())
        x = x.unsqueeze(1)
        # x = rearrange(x, "(b t) c -> (b t) j c", b=B, t=T, j=J)
        return x


class VisionTransformer(nn.Module):
    """Vision Transformer"""

    def __init__(
        self,
        img_size=224,
        patch_size=16,
        in_chans=3,
        num_classes=1000,
        embed_dim=768,
        depth=12,
        num_heads=12,
        mlp_ratio=4.0,
        qkv_bias=False,
        qk_scale=None,
        drop_rate=0.0,
        attn_drop_rate=0.0,
        drop_path_rate=0.1,
        hybrid_backbone=None,
        norm_layer=nn.LayerNorm,
        num_frames=64,
        attention_type="divided_space_time",
        dropout=0.0,
        output_head_num=1,
        global_local_fps_ratio=4,
        tasks=[],
    ):
        super().__init__()
        self.attention_type = attention_type
        self.depth = depth
        self.output_head_num = output_head_num
        self.dropout = nn.Dropout(dropout)
        self.num_classes = num_classes
        self.num_features = (
            self.embed_dim
        ) = embed_dim  # num_features for consistency with other models

        self.patch_embed = PatchEmbed(
            img_size=img_size,
            patch_size=patch_size,
            in_chans=in_chans,
            embed_dim=embed_dim,
        )

        # TODO: fix the embedding layers for other modalities
        if "hands-left" in tasks or "hands-right" in tasks:
            self.joint_embed = JointEmbed(embed_dim=embed_dim)
            self.tracked_embed = TrackedEmbed(embed_dim=embed_dim)
            self.hand_left_pos_embed = nn.Parameter(torch.zeros(1, 26, embed_dim))
            self.hand_right_pos_embed = nn.Parameter(torch.zeros(1, 26, embed_dim))
            self.hands_left_embed = nn.Parameter(torch.zeros(1, 1, embed_dim))
            self.hands_right_embed = nn.Parameter(torch.zeros(1, 1, embed_dim))

            trunc_normal_(self.hand_left_pos_embed, std=0.02)
            trunc_normal_(self.hand_right_pos_embed, std=0.02)
            trunc_normal_(self.hands_left_embed, std=0.02)
            trunc_normal_(self.hands_right_embed, std=0.02)

        if "eye" in tasks:
            self.eye_embed = EyeEmbed(embed_dim=embed_dim)
            self.eye_pos_embed = nn.Parameter(torch.zeros(1, 1, embed_dim))

            trunc_normal_(self.eye_pos_embed, std=0.02)

        if "head" in tasks:
            self.head_embed = HeadEmbed(embed_dim=embed_dim)
            self.head_pos_embed = nn.Parameter(torch.zeros(1, 1, embed_dim))

            trunc_normal_(self.head_pos_embed, std=0.02)

        if "depth-aligned" in tasks or "depth-undistorted" in tasks:
            self.depth_patch_embed = PatchEmbed(
                img_size=img_size,
                patch_size=patch_size,
                in_chans=1,
                embed_dim=embed_dim,
            )

        num_patches = 196
        self.global_local_fps_ratio = global_local_fps_ratio


        self.cls_token = nn.Parameter(torch.zeros(1, 1, embed_dim))
        self.pos_embed = nn.Parameter(torch.zeros(1, num_patches + 1, embed_dim))
        self.depth_pos_embed = nn.Parameter(torch.zeros(1, num_patches, embed_dim))
        self.rgb_embed = nn.Parameter(torch.zeros(1, 1, embed_dim))

        self.pos_drop = nn.Dropout(p=drop_rate)
        if self.attention_type != "space_only":
            self.time_embed = nn.Parameter(torch.zeros(1, num_frames, embed_dim))
            self.time_drop = nn.Dropout(p=drop_rate)

        # Attention Blocks
        dpr = [
            x.item() for x in torch.linspace(0, drop_path_rate, self.depth)
        ]  # stochastic depth decay rule
        self.blocks = nn.ModuleList(
            [
                Block(
                    dim=embed_dim,
                    num_heads=num_heads,
                    mlp_ratio=mlp_ratio,
                    qkv_bias=qkv_bias,
                    qk_scale=qk_scale,
                    drop=drop_rate,
                    attn_drop=attn_drop_rate,
                    drop_path=dpr[i],
                    norm_layer=norm_layer,
                    attention_type=self.attention_type,
                    class_tokens=self.output_head_num,
                )
                for i in range(self.depth)
            ]
        )
        self.norm = norm_layer(embed_dim)

        # Classifier head
        self.head = (
            nn.Linear(embed_dim, num_classes) if num_classes > 0 else nn.Identity()
        )

        trunc_normal_(self.pos_embed, std=0.02)
        trunc_normal_(self.depth_pos_embed, std=0.02)
        trunc_normal_(self.cls_token, std=0.02)
        trunc_normal_(self.rgb_embed, std=0.02)

        if output_head_num != 1:
            trunc_normal_(self.pos_embed_a, std=0.02)
            trunc_normal_(self.cls_token_a, std=0.02)

        self.apply(self._init_weights)

        # initialization of temporal attention weights
        if self.attention_type == "divided_space_time":
            i = 0
            for m in self.blocks.modules():
                m_str = str(m)
                if "Block" in m_str:
                    if i > 0:
                        nn.init.constant_(m.temporal_fc.weight, 0)
                        nn.init.constant_(m.temporal_fc.bias, 0)
                    i += 1

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=0.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)

    @torch.jit.ignore
    def no_weight_decay(self):
        return {
            "pos_embed",
            "cls_token",
            "time_embed",
            "rgb_embed",
            "hands_left_embed",
            "hands_right_embed",
            "cls_token_a",
            "pos_embed_a",
            "hand_left_pos_embed",
            "hand_right_pos_embed",
            "eye_pos_embed",
            "head_pos_embed",
            "depth_pos_embed",
        }

    def get_classifier(self):
        return self.head

    def reset_classifier(self, num_classes, global_pool=""):
        self.num_classes = num_classes
        self.head = (
            nn.Linear(self.embed_dim, num_classes) if num_classes > 0 else nn.Identity()
        )

    def prepare_tokens(self, is_global=None, **inputs):
        output_head_num = self.output_head_num

        input_x = {}
        for key, value in inputs.items():
            B = value.shape[0]
            if key == "rgb":
                x_i, T, W = self.patch_embed(
                    value
                )  # default x_i for rgb is: [64, num_tokens=196, embedim=768]
                input_x[key] = x_i
            elif "hand" in key:
                B, T, _ = value.shape
                hand_norm_value = value[:, :, 1:-52]
                track_info = torch.cat(
                    [value[:, :, 0].unsqueeze(-1), value[:, :, -52:]], dim=-1
                )
                hand_norm_value = hand_norm_value.reshape(B, T, 26, 16)

                hand_norm_value, T, J = self.joint_embed(hand_norm_value)
                tracked_value = self.tracked_embed(track_info)

                hand_norm_value = hand_norm_value + tracked_value
                input_x[key] = hand_norm_value
            elif "eye" in key:
                B, T, _ = value.shape
                eye_norm_value = value
                # eye_norm_value = eye_norm_value.reshape(B, T, 7)

                eye_norm_value, T = self.eye_embed(eye_norm_value)

                input_x[key] = eye_norm_value
            elif "head" in key:
                B, T, _ = value.shape
                head_norm_value = value
                # head_norm_value = head_norm_value.reshape(B, T, 16)

                head_norm_value, T = self.head_embed(head_norm_value)

                input_x[key] = head_norm_value
            elif "depth" in key:
                x_i, T, W = self.depth_patch_embed(value)
                input_x[key] = x_i

        H = W = 14

        if output_head_num == 1:
            cls_tokens = self.cls_token  # rgb: 1, 1, 768
        else:
            cls_tokens = torch.cat((self.cls_token_a, self.cls_token), 1)
        cls_tokens = cls_tokens.expand(list(input_x.values())[0].shape[0], -1, -1)
        cls_tokens = cls_tokens + self.pos_embed[:, 0:1]
        x_list = [cls_tokens]

        for key, value in input_x.items():
            if key == "rgb":
                pos_embed = self.pos_embed[:, 1:]
                value = value + pos_embed  # + self.rgb_embed
                # print('rgb value shape: ', value.shape)
                x_list.append(value)
            elif key == "hands-left":
                pos_embed = self.hand_left_pos_embed
                value = value + pos_embed  # + self.hands_left_embed
                # print('hands-left value shape: ', value.shape)
                x_list.append(value)
            elif key == "hands-right":
                pos_embed = self.hand_right_pos_embed
                value = value + pos_embed  # + self.hands_right_embed
                # print('hands-right value shape: ', value.shape)
                x_list.append(value)
            elif key == "eye":
                value = value + self.eye_pos_embed
                x_list.append(value)
            elif key == "head":
                value = value + self.head_pos_embed
                x_list.append(value)
            elif "depth" in key:
                value = value + self.depth_pos_embed
                x_list.append(value)

        x = torch.cat(x_list, 1)

        x = self.pos_drop(x)

        # Time Embeddings
        if self.attention_type != "space_only":
            cls_tokens = x[:B, : self.output_head_num, :]
            x = x[:, self.output_head_num :]
            x = rearrange(x, "(b t) n m -> (b n) t m", b=B, t=T)
            # Resizing time embeddings in case they don't match
            if T != self.time_embed.size(1):
                time_embed = self.time_embed.transpose(1, 2)
                new_time_embed = F.interpolate(
                    time_embed, size=(T), mode="nearest"
                )  # same time length, sample different frames from there.
                
                new_time_embed = new_time_embed.transpose(1, 2)
                x = x + new_time_embed
            else:
                x = x + self.time_embed
            x = self.time_drop(x)  # 3528 8 768
            x = rearrange(
                x, "(b n) t m -> b (n t) m", b=B, t=T
            )  # 18 1568 768,   note 8*196=1568
            x = torch.cat((cls_tokens, x), dim=1)
        return x, B, T, W

    def forward_features(self, get_all=False, get_attn=False, is_global=None, **inputs):
        x, B, T, W = self.prepare_tokens(is_global, **inputs)

        if get_attn:
            for i, blk in enumerate(self.blocks):
                if i < len(self.blocks) - 1:
                    x = blk(x, B, T, W)
                else:
                    # return attention of the last block
                    return blk(x, B, T, W, return_attn=True)

        # Attention blocks
        for blk in self.blocks:
            x = blk(x, B, T, W)

        # Predictions for space-only baseline
        # import pdb; pdb.set_trace() # divided_space_time
        if self.attention_type == "space_only":
            x = rearrange(x, "(b t) n m -> b t n m", b=B, t=T)
            x = torch.mean(x, 1)  # averaging predictions for every frame

        x = self.norm(x)  # rgb: torch.Size([8, 197, 768])
        if get_all:
            return x
        return torch.flatten(x[:, : self.output_head_num], start_dim=1)

    def forward(self, use_head=True, get_all=False, **inputs):
        x = self.forward_features(get_all=get_all, **inputs)
        # import pdb; pdb.set_trace() # x [18, 4, 768]
        if use_head:
            x = self.head(x)
        return x

    def get_intermediate_layers(self, x, n=1):
        x = self.forward_features(x, get_all=True)
        return [
            x,
        ]

    def get_last_selfattention(self, x):
        x = self.prepare_tokens(x)
        for i, blk in enumerate(self.blocks):
            if i < len(self.blocks) - 1:
                x = blk(x)
            else:
                # return attention of the last block
                return blk(x, return_attention=True)


@MODEL_REGISTRY.register()
class vit_base_patch16_224(nn.Module):
    def __init__(self, cfg, **kwargs):
        super(vit_base_patch16_224, self).__init__()
        self.pretrained = cfg.TRAIN.PRETRAINED
        patch_size = 16
        self.model = VisionTransformer(
            img_size=cfg.DATA.TRAIN_CROP_SIZE,
            num_classes=cfg.MODEL.NUM_CLASSES,
            patch_size=patch_size,
            embed_dim=768,
            depth=12,
            num_heads=12,
            mlp_ratio=4,
            qkv_bias=True,
            norm_layer=partial(nn.LayerNorm, eps=1e-6),
            drop_rate=0.0,
            attn_drop_rate=0.0,
            drop_path_rate=0.1,
            num_frames=cfg.DATA.NUM_FRAMES,
            attention_type=cfg.TIMESFORMER.ATTENTION_TYPE,
            output_head_num=cfg.MODEL.OUTPUT_HEAD_NUM,
            tasks=cfg.TASKS,
            **kwargs,
        )

        self.attention_type = cfg.TIMESFORMER.ATTENTION_TYPE
        self.model.default_cfg = default_cfgs["vit_base_patch16_224"]
        self.num_patches = (cfg.DATA.TRAIN_CROP_SIZE // patch_size) * (
            cfg.DATA.TRAIN_CROP_SIZE // patch_size
        )
        img_size = cfg.DATA.TRAIN_CROP_SIZE
        num_frames = cfg.DATA.NUM_FRAMES
        pretrained_model = cfg.TIMESFORMER.PRETRAINED_MODEL

        if self.pretrained:
            if not pretrained_model:
                ckpt = model_zoo.load_url(
                    default_cfgs["vit_base_patch16_224"]["url"],
                    progress=False,
                    map_location="cpu",
                )
            else:
                ckpt = torch.load(pretrained_model, map_location='cpu')['model_state']
            new_stata_dict = {}
            for k, v in ckpt.items():
                if 'model.' in k:
                    k = k.replace("model.", "")
                if "head" in k:
                    continue
                new_stata_dict[k] = v
            msg = self.model.load_state_dict(new_stata_dict, strict=False)
            print(f"Loaded model with msg: {msg}")

    def forward(self, use_head=True, get_all=False, **inputs):
        x = self.model.forward_features(get_all=get_all, **inputs)
        if use_head:
            x = self.model.head(x)
        return x


@MODEL_REGISTRY.register()
class TimeSformer(nn.Module):
    def __init__(
        self,
        img_size=224,
        patch_size=16,
        num_classes=400,
        num_frames=8,
        attention_type="divided_space_time",
        pretrained_model="",
        **kwargs,
    ):
        super(TimeSformer, self).__init__()
        self.pretrained = pretrained_model != ""
        self.model = VisionTransformer(
            img_size=img_size,
            num_classes=num_classes,
            patch_size=patch_size,
            embed_dim=768,
            depth=12,
            num_heads=12,
            mlp_ratio=4,
            qkv_bias=True,
            norm_layer=partial(nn.LayerNorm, eps=1e-6),
            drop_rate=0.0,
            attn_drop_rate=0.0,
            drop_path_rate=0.1,
            num_frames=num_frames,
            attention_type=attention_type,
            **kwargs,
        )

        self.attention_type = attention_type
        self.model.default_cfg = default_cfgs[
            "vit_base_patch" + str(patch_size) + "_224"
        ]
        self.num_patches = (img_size // patch_size) * (img_size // patch_size)
        if self.pretrained:
            load_pretrained(
                self.model,
                num_classes=self.model.num_classes,
                in_chans=kwargs.get("in_chans", 3),
                filter_fn=_conv_filter,
                img_size=img_size,
                num_frames=num_frames,
                num_patches=self.num_patches,
                attention_type=self.attention_type,
                pretrained_model=pretrained_model,
            )

    def forward(self, **x):
        x = self.model(**x)
        return x


@MODEL_REGISTRY.register()
class FrozenVisionTransformActSeqs(nn.Module):
    def __init__(self, cfg, **kwargs):
        super(FrozenVisionTransformActSeqs, self).__init__()
        self.pretrained = True
        patch_size = 16
        self.model = VisionTransformer(
            img_size=cfg.DATA.TRAIN_CROP_SIZE,
            num_classes=cfg.MODEL.NUM_CLASSES,
            patch_size=patch_size,
            embed_dim=768,
            depth=12,
            num_heads=12,
            mlp_ratio=4,
            qkv_bias=True,
            norm_layer=partial(nn.LayerNorm, eps=1e-6),
            drop_rate=0.0,
            attn_drop_rate=0.0,
            drop_path_rate=0.1,
            num_frames=cfg.DATA.NUM_FRAMES,
            attention_type=cfg.TIMESFORMER.ATTENTION_TYPE,
            output_head_num=cfg.MODEL.OUTPUT_HEAD_NUM,
            tasks=cfg.TASKS,
            **kwargs,
        )

        self.attention_type = cfg.TIMESFORMER.ATTENTION_TYPE
        self.model.default_cfg = default_cfgs["vit_base_patch16_224"]
        self.num_patches = (cfg.DATA.TRAIN_CROP_SIZE // patch_size) * (
            cfg.DATA.TRAIN_CROP_SIZE // patch_size
        )
        img_size = cfg.DATA.TRAIN_CROP_SIZE
        num_frames = cfg.DATA.NUM_FRAMES
        pretrained_model = cfg.TIMESFORMER.PRETRAINED_MODEL
        if self.pretrained:
            if not pretrained_model:
                ckpt = model_zoo.load_url(
                    default_cfgs["vit_base_patch16_224"]["url"],
                    progress=False,
                    map_location="cpu",
                )
                new_stata_dict = {}
                for k, v in ckpt.items():
                    if "head" in k:
                        continue
                    new_stata_dict[k] = v
                msg = self.model.load_state_dict(new_stata_dict, strict=False)
                print(f"Loaded model with msg: {msg}")
            else:
                load_pretrained(
                    self.model,
                    num_classes=self.model.num_classes,
                    in_chans=kwargs.get("in_chans", 3),
                    filter_fn=_conv_filter,
                    img_size=img_size,
                    num_frames=num_frames,
                    num_patches=self.num_patches,
                    attention_type=self.attention_type,
                    pretrained_model=pretrained_model,
                )

        # freeze all model parameters except for the head modules
        for name, param in self.model.named_parameters():
            if "head" not in name:
                param.requires_grad = False

    def forward(self, use_head=True, get_all=False, **inputs):
        for i, (_, inputs_i) in enumerate(inputs.items()):
            if i == 0:
                x = self.model.forward_features(get_all=get_all, **inputs_i)
            else:
                x += self.model.forward_features(get_all=get_all, **inputs_i)

        if use_head:
            x = self.model.head(x)
        return x


@MODEL_REGISTRY.register()
class FrozenVisionTransform(nn.Module):
    def __init__(self, cfg, **kwargs):
        super(FrozenVisionTransform, self).__init__()
        self.pretrained = True
        patch_size = 16
        self.model = VisionTransformer(
            img_size=cfg.DATA.TRAIN_CROP_SIZE,
            num_classes=cfg.MODEL.NUM_CLASSES,
            patch_size=patch_size,
            embed_dim=768,
            depth=12,
            num_heads=12,
            mlp_ratio=4,
            qkv_bias=True,
            norm_layer=partial(nn.LayerNorm, eps=1e-6),
            drop_rate=0.0,
            attn_drop_rate=0.0,
            drop_path_rate=0.1,
            num_frames=cfg.DATA.NUM_FRAMES,
            attention_type=cfg.TIMESFORMER.ATTENTION_TYPE,
            output_head_num=cfg.MODEL.OUTPUT_HEAD_NUM,
            tasks=cfg.TASKS,
            **kwargs,
        )

        self.attention_type = cfg.TIMESFORMER.ATTENTION_TYPE
        self.model.default_cfg = default_cfgs["vit_base_patch16_224"]
        self.num_patches = (cfg.DATA.TRAIN_CROP_SIZE // patch_size) * (
            cfg.DATA.TRAIN_CROP_SIZE // patch_size
        )
        img_size = cfg.DATA.TRAIN_CROP_SIZE
        num_frames = cfg.DATA.NUM_FRAMES
        pretrained_model = cfg.TIMESFORMER.PRETRAINED_MODEL
        if self.pretrained:
            if not pretrained_model:
                ckpt = model_zoo.load_url(
                    default_cfgs["vit_base_patch16_224"]["url"],
                    progress=False,
                    map_location="cpu",
                )
            else:
                ckpt = torch.load(pretrained_model, map_location='cpu')['model_state']
            new_stata_dict = {}
            for k, v in ckpt.items():
                if 'model.' in k:
                    k = k.replace("model.", "")
                if "head" in k:
                    continue
                new_stata_dict[k] = v
            msg = self.model.load_state_dict(new_stata_dict, strict=False)
            print(f"Loaded model with msg: {msg}")

        # freeze all model parameters except for the head modules
        for name, param in self.model.named_parameters():
            if "head" not in name:
                param.requires_grad = False

    def forward(self, use_head=True, get_all=False, **inputs):
        x = self.model.forward_features(get_all=get_all, **inputs)
        if use_head:
            x = self.model.head(x)
        return x


if __name__ == "__main__":
    model = VisionTransformer(
        img_size=224,
        num_classes=1677,
        patch_size=16,
        embed_dim=768,
        depth=12,
        num_heads=12,
        mlp_ratio=4,
        qkv_bias=True,
        norm_layer=partial(nn.LayerNorm, eps=1e-6),
        drop_rate=0.0,
        attn_drop_rate=0.0,
        drop_path_rate=0.1,
        num_frames=16,
        attention_type="divided_space_time",
        output_head_num=1,
        tasks=["rgb", "hands-left", "hands-right", "depth-aligned", "eye"],
    )

    x = {
        "rgb": torch.randn(1, 3, 16, 224, 224),
        "hands-left": torch.randn(1, 16, 469),
        "hands-right": torch.randn(1, 16, 469),
        "depth-aligned": torch.randn(1, 1, 16, 224, 224),
        "eye": torch.randn(1, 16, 7),
    }

    y = model.forward_features(get_all=False, **x)
    print(y.shape)
